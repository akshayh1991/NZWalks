Dto Model:
===========
using System.ComponentModel.DataAnnotations;

namespace NZWalks.API.Models.DTO
{
    public class ImageUploadDto
    {
        [Required]
        public IFormFile File { get; set; }
        [Required]
        public string FileName { get; set; }
        public string? FileDescription { get; set; }
    }
}


Domain model:
===============
using System.ComponentModel.DataAnnotations.Schema;

namespace NZWalks.API.Models.Domain
{
    public class Image
    {
        public Guid Id { get; set; }
        [NotMapped]
        public IFormFile File { get; set; }
        public string FileName { get; set; }
        public string? FileDescription { get; set; }
        public string FileExtension { get; set; }
        public long FileSizeInBytes { get; set; }
        public string FilePath { get; set; }

    }
}



ControllerMethod:
=====================
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using NZWalks.API.Models.Domain;
using NZWalks.API.Models.DTO;
using NZWalks.API.Repositories;

namespace NZWalks.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ImagesController : ControllerBase
    {
        private readonly IImageRepository _imageRepository;

        public ImagesController(IImageRepository imageRepository)
        {
            _imageRepository = imageRepository;
        }
        [HttpPost]
        public async Task<IActionResult> Upload([FromForm] ImageUploadDto imageUploadDto)
        {
            ValidateImage(imageUploadDto);
            if (ModelState.IsValid)
            {
                //Convert Dto to Domain model
                var image = new Image
                {
                    File = imageUploadDto.File,
                    FileExtension = Path.GetExtension(imageUploadDto.File.FileName),
                    FileName=imageUploadDto.FileName,
                    FileSizeInBytes=imageUploadDto.File.Length,
                    FileDescription=imageUploadDto.FileDescription
                };
                await _imageRepository.UploadImage(image);
                return Ok(image);
            }
            return BadRequest(ModelState);
        }

        private void ValidateImage(ImageUploadDto imageUploadDto)
        {
            var allowedExtension = new string[] { ".jpg", ".jpeg", ".png" };
            if (!allowedExtension.Contains(Path.GetExtension(imageUploadDto.File.FileName)))
            {
                ModelState.AddModelError("file", "Unsupported file extension");
            }
            if (imageUploadDto.File.Length>10485760)
            {
                ModelState.AddModelError("file", "File size is more than 10MB");
            }
        }
    }
}






InterfaceMethod:
=================
using NZWalks.API.Models.Domain;

namespace NZWalks.API.Repositories
{
    public interface IImageRepository
    {
        Task<Image> UploadImage(Image image);
    }
}






RepositoryMethod:
==================
using NZWalks.API.Data;
using NZWalks.API.Models.Domain;

namespace NZWalks.API.Repositories
{
    public class LocalImageRepository : IImageRepository
    {
        private readonly IWebHostEnvironment _webHostEnvironment;
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly NZWalksDbContext _context;

        public LocalImageRepository(IWebHostEnvironment webHostEnvironment,IHttpContextAccessor httpContextAccessor,NZWalksDbContext context)
        {
            _webHostEnvironment = webHostEnvironment;
            _httpContextAccessor = httpContextAccessor;
            _context = context;
        }
        public async Task<Image> UploadImage(Image image)
        {
            var localPath = Path.Combine(_webHostEnvironment.ContentRootPath, "Images",$"{image.FileName}{image.FileExtension}");

            //Upload Image to local path
            using var stream = new FileStream(localPath, FileMode.Create);
            await image.File.CopyToAsync(stream);

            var urlFilePath = $"{_httpContextAccessor.HttpContext.Request.Scheme}://{_httpContextAccessor.HttpContext.Request.Host}{_httpContextAccessor.HttpContext.Request.PathBase}/Images/{image.FileName}{image.FileExtension}";

            image.FilePath = urlFilePath;

            //Add Images to Image table
            await _context.Images.AddAsync(image);
            await _context.SaveChangesAsync();
            return image;


        }
    }
}



======================================================Extra stuffs=================================================================================


To Get the path of file in webApI
======================================

(Path.GetExtension(imageUploadDto.File.FileName))


Creating Local Path:
=====================
We will get the local path by injecting IWebHostEnviornment

private readonly IWebHostEnvironment _webHostEnvironment;

public LocalImageRepository(IWebHostEnvironment webHostEnvironment)
{
    _webHostEnvironment = webHostEnvironment;
}


public Task<Image> UploadImage(Image image)
{
    var localPath=Path.Combine(_webHostEnvironment.ContentRootPath,"Images",image.FileName,image.FileExtension);
}


HttpContextAccessor
===================

Program.cs
-------------
builder.Services.AddHttpContextAccessor();


ToGet the hostedUrl path for Images:
-------------------------------------
var urlFilePath = $"{_httpContextAccessor.HttpContext.Request.Scheme}://{_httpContextAccessor.HttpContext.Request.Host}{_httpContextAccessor.HttpContext.Request.PathBase}/Images/{image.File.FileName}{image.FileExtension}";


To serve the static files:
-----------------------------

app.UseStaticFiles(new StaticFileOptions
{
    FileProvider=new PhysicalFileProvider(Path.Combine(Directory.GetCurrentDirectory(),"Images")),
    RequestPath="/Images"
});